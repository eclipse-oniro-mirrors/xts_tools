/*
 * Copyright (c) 2025 Shenzhen Kaihong Digital Industry Development Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BusinessError } from '@kit.BasicServicesKit';

class MyData2 {
  str: string;
  constructor(str: string) {
    this.str = str;
  }
}

@Entry
@Component
struct StatusManagerV2IfElseAnimateTo003 {
  @State data1: MyData2|undefined = new MyData2("branch 0");
  @State data2: MyData2|undefined = new MyData2("branch 1");
  private caseName: string = 'SUB_ACE_STATUSMANAGERV2_IFELSE_ANIMATETO_0040';

  async routePage() {
    this.getUIContext().getRouter().pushUrl({
      url: "testability/pages/StatusManagerV2IfElseAnimateTo/StatusManagerV2IfElseAnimateTo004",
    })
      .then(() => {
        console.info(`${this.caseName} StatusManagerV2IfElseAnimateTo004 succeeded`);
      })
      .catch((error: BusinessError) => {
        console.error(`${this.caseName} StatusManagerV2IfElseAnimateTo004 pushUrl failed, error is ${JSON.stringify(error)}.`);
      })
  }

  build() {
    Column() {
      Column() {
        Text('状态管理V1')
          .fontSize(30)
          .textAlign(TextAlign.Center)
          .id('pushUrl')
          .onClick(() => {
            this.routePage();
          })
      }.width('100%').height('10%').justifyContent(FlexAlign.Center)
      Column() {
        if (this.data1) {
          Text(this.data1?.str)
            .fontColor(Color.Blue)
            .fontSize(40)
            .textAlign(TextAlign.Center)
            .id("1")
            .transition(TransitionEffect.IDENTITY)
        } else {
          Text(this.data2?.str)
            .fontColor(Color.Pink)
            .fontSize(40)
            .textAlign(TextAlign.Center)
            .id("2")
            .transition(TransitionEffect.IDENTITY)
        }
      }.width('100%').height('20%').justifyContent(FlexAlign.Center)
      Column() {
        Button("play with animation")
          .id("changeData1")
          .margin(20)
          .fontSize(30)
          .stateEffect(true)
          .type(ButtonType.Capsule)
          .buttonStyle(ButtonStyleMode.NORMAL)
          .onClick(() => {
            animateTo({}, () => {
              if (this.data1) {
                this.data1 = undefined;
                this.data2 = new MyData2("branch 1");
                console.info(`${this.caseName} data1 is ${JSON.stringify(this.data1)}`);
                console.info(`${this.caseName} data2 is ${JSON.stringify(this.data2)}`);
              } else {
                this.data1 = new MyData2("branch 0");
                this.data2 = undefined;
                console.info(`${this.caseName} data1 is ${JSON.stringify(this.data1)}`);
                console.info(`${this.caseName} data2 is ${JSON.stringify(this.data2)}`);
              }
            })
          })
      }.width('100%').height('10%').justifyContent(FlexAlign.Center)
    }.justifyContent(FlexAlign.Center)
  }
}