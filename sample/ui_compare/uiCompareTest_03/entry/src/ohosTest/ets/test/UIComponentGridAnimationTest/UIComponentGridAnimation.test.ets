/**
 * Copyright (c) 2025 Shenzhen Kaihong Digital Industry Development Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, Level } from '@ohos/hypium';
import { BusinessError, commonEventManager } from '@kit.BasicServicesKit';
import { Driver, ON ,Component, UiWindow, MouseButton } from '@kit.TestKit';
import { uiAppearance } from '@kit.ArkUI';
import Settings from '../model/Settings';
import windowSnap from '../model/snapShot';
import Logger from '../model/Logger';
import Utils from '../model/Utils';


let TAG = 'RunTimeTest';

function sleep(ms: number) {
  return new Promise<string>(resolve => setTimeout(resolve, ms));
}

export default function UIComponentGridAnimation() {
  describe('UIComponentGridAnimation', () => {
    beforeAll(() => {

    })
    beforeEach(() => {

    })

    afterEach(async (done: Function) => {
      if (Settings.windowClass == undefined) {
        return
      }
      Settings.windowClass.destroyWindow((err) => {
        if (err.code) {
          Logger.error(`[${TAG}_afterEach]`, `Failed to destroy the window. Cause : ${JSON.stringify(err)}`);
          return;
        }
        Logger.info(`[${TAG}_afterEach]`, `Succeeded in destroy the window.`);
      })
      await Utils.sleep(1000);
      done();
    })

    afterAll(() => {

    })

    
    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0040
     * @tc.name    SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0040
     * @tc.desc    Test dynamic changes to Grid component next parameter
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0040', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0040';
      let pageName = "UIComponentGridAnimation0040";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentGridAnimation/' + pageName);
      let driver: Driver = Driver.create();
      let nextButton: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      let changeButton: Component = await driver.waitForComponent(ON.id(pageName + '_02'), 1000);
      await driver.waitForIdle(500, 1000);
      await nextButton.click();
      await driver.waitForIdle(2000, 3000);
      await windowSnap.snapShot(TAG + '_01');
      await changeButton.click();
      await driver.waitForIdle(2000, 3000);
      await nextButton.click();
      await driver.waitForIdle(2000, 3000);
      await windowSnap.snapShot(TAG + '_02');
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0050
     * @tc.name    SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0050
     * @tc.desc    Test Grid animation page-turning event callbacks
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0050', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0050';
      let pageName = "UIComponentGridAnimation0050";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentGridAnimation/' + pageName);
      let driver: Driver = Driver.create();
      let nextButton: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      await driver.waitForIdle(500, 1000);
      await nextButton.click();
      await driver.waitForIdle(2000, 3000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0110
     * @tc.name    SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0110
     * @tc.desc    Test Grid page-turning animation with irregular layouts
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0110', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0110';
      let pageName = "UIComponentGridAnimation0110";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentGridAnimation/' + pageName);
      let driver: Driver = Driver.create();
      let nextButton: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      await driver.waitForIdle(500, 1000);
      await nextButton.click();
      await driver.waitForIdle(2000, 3000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0120
     * @tc.name    SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0120
     * @tc.desc    Test Grid page-turning animation using repeat mode
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0120', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0120';
      let pageName = "UIComponentGridAnimation0120";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentGridAnimation/' + pageName);
      let driver: Driver = Driver.create();
      let nextButton: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      await driver.waitForIdle(500, 1000);
      await nextButton.click();
      await driver.waitForIdle(2000, 3000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0130
     * @tc.name    SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0130
     * @tc.desc    Test page-turning via mouse click on scrollbar area
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0130', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0130';
      let pageName = "UIComponentGridAnimation0130";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentGridAnimation/' + pageName);
      let driver: Driver = Driver.create();
      let nextButton: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      let grid: Component = await driver.waitForComponent(ON.id(pageName + '_03'), 1000);
      let center = await grid.getBoundsCenter();
      let bounds = await grid.getBounds();
      await driver.waitForIdle(500, 1000);
      await driver.mouseMoveTo({x: bounds.right - 10, y: center.y});
      await driver.mouseClick({x: bounds.right - 10, y: center.y}, MouseButton.MOUSE_BUTTON_LEFT);
      await driver.waitForIdle(1000, 2000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0140
     * @tc.name    SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0140
     * @tc.desc    Test page-turning via mouse long click on scrollbar area
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0140', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0140';
      let pageName = "UIComponentGridAnimation0140";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentGridAnimation/' + pageName);
      let driver: Driver = Driver.create();
      let nextButton: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      let grid: Component = await driver.waitForComponent(ON.id(pageName + '_03'), 1000);
      let center = await grid.getBoundsCenter();
      let bounds = await grid.getBounds();
      await driver.waitForIdle(500, 1000);
      await driver.mouseMoveTo({x: bounds.right - 10, y: center.y});
      await driver.mouseLongClick({x: bounds.right - 10, y: center.y}, MouseButton.MOUSE_BUTTON_LEFT);
      await driver.waitForIdle(1000, 2000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0150
     * @tc.name    SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0150
     * @tc.desc    Test page-turning with double mouse clicks
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0150', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_GRID_ANIMATION_0150';
      let pageName = "UIComponentGridAnimation0150";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentGridAnimation/' + pageName);
      let driver: Driver = Driver.create();
      let nextButton: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      let grid: Component = await driver.waitForComponent(ON.id(pageName + '_03'), 1000);
      let center = await grid.getBoundsCenter();
      let bounds = await grid.getBounds();
      await driver.waitForIdle(500, 1000);
      await driver.mouseMoveTo({x: bounds.right - 10, y: center.y});
      await driver.mouseDoubleClick({x: bounds.right - 10, y: center.y}, MouseButton.MOUSE_BUTTON_LEFT);
      await driver.waitForIdle(1000, 2000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

  })
}
