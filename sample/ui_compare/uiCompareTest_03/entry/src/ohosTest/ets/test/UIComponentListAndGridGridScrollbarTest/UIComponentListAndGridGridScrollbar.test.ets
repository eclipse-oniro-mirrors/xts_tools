/**
 * Copyright (c) 2025 Shenzhen Kaihong Digital Industry Development Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, Level } from '@ohos/hypium';
import { BusinessError, commonEventManager } from '@kit.BasicServicesKit';
import { Driver, ON ,Component, UiWindow } from '@kit.TestKit';
import { uiAppearance } from '@kit.ArkUI';
import Settings from '../model/Settings';
import windowSnap from '../model/snapShot';
import Logger from '../model/Logger';
import Utils from '../model/Utils';


let TAG = 'RunTimeTest';

function sleep(ms: number) {
  return new Promise<string>(resolve => setTimeout(resolve, ms));
}

export default function UIComponentListAndGridGridScrollbar() {
  describe('UIComponentListAndGridGridScrollbar', () => {
    beforeAll(() => {

    })
    beforeEach(() => {

    })

    afterEach(async (done: Function) => {
      if (Settings.windowClass == undefined) {
        return
      }
      Settings.windowClass.destroyWindow((err) => {
        if (err.code) {
          Logger.error(`[${TAG}_afterEach]`, `Failed to destroy the window. Cause : ${JSON.stringify(err)}`);
          return;
        }
        Logger.info(`[${TAG}_afterEach]`, `Succeeded in destroy the window.`);
      })
      await Utils.sleep(1000);
      done();
    })

    afterAll(() => {

    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0010
     * @tc.name    SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0010
     * @tc.desc    Test floating scrollbar display in Grid component
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0010', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0010';
      let pageName = "UIComponentListAndGridGridScrollbar0010";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentListAndGridGridScrollbar/' + pageName);
      let driver: Driver = Driver.create();
      let grid: Component = await driver.waitForComponent(ON.id(pageName + '_03'), 1000);
      let bounds = await grid.getBounds();
      let center = await grid.getBoundsCenter();
      await Utils.sleep(2000);
      await driver.mouseMoveTo({x: bounds.right - 5, y: bounds.top + 50});
      await driver.waitForIdle(1000, 2000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0020
     * @tc.name    SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0020
     * @tc.desc    Test toggling Grid scrollbar to floating display state
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0020', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0020';
      let pageName = "UIComponentListAndGridGridScrollbar0020";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentListAndGridGridScrollbar/' + pageName);
      let driver: Driver = Driver.create();
      let button: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      let grid: Component = await driver.waitForComponent(ON.id(pageName + '_03'), 1000);
      let bounds = await grid.getBounds();
      await driver.waitForIdle(1000, 2000);
      await button.click();
      await Utils.sleep(2000);
      await driver.mouseMoveTo({x: bounds.right - 5, y: bounds.top + 50});
      await driver.waitForIdle(1000, 2000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0030
     * @tc.name    SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0030
     * @tc.desc    Test floating scrollbar during Grid mirroring effect changes
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0030', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0030';
      let pageName = "UIComponentListAndGridGridScrollbar0030";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentListAndGridGridScrollbar/' + pageName);
      let driver: Driver = Driver.create();
      let button: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      let grid: Component = await driver.waitForComponent(ON.id(pageName + '_03'), 1000);
      let bounds = await grid.getBounds();
      await driver.waitForIdle(1000, 2000);
      await driver.mouseMoveTo({x: bounds.right - 5, y: bounds.top + 50});
      await driver.waitForIdle(1000, 2000);
      await windowSnap.snapShot(TAG + '_01');
      await button.click();
      await Utils.sleep(2000);
      await driver.mouseMoveTo({x: bounds.left + 5, y: bounds.top + 50});
      await driver.waitForIdle(1000, 2000);
      await windowSnap.snapShot(TAG + '_02');
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

    /*
     * @tc.number  SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0040
     * @tc.name    SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0040
     * @tc.desc    Test externally-bound scrollbar hover display in Grid component
     * @tc.level   3
     */
    it('SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0040', Level.LEVEL3, async (done: Function) => {
      TAG = 'SUB_ACE_UI_COMPONENT_LISTANDGRID_GRID_SCROLLBAR_0040';
      let pageName = "UIComponentListAndGridGridScrollbar0040";
      Logger.info(`[${TAG}]`, `Case start.`);
      Settings.createWindow('testability/pages/UIComponentListAndGridGridScrollbar/' + pageName);
      let driver: Driver = Driver.create();
      let button: Component = await driver.waitForComponent(ON.id(pageName + '_01'), 1000);
      let grid: Component = await driver.waitForComponent(ON.id(pageName + '_03'), 1000);
      let bounds = await grid.getBounds();
      await driver.waitForIdle(1000, 2000);
      await driver.mouseMoveTo({x: bounds.right - 5, y: bounds.top + 50});
      await driver.waitForIdle(1000, 2000);
      await windowSnap.snapShot();
      await Utils.sleep(1000);
      Logger.info(`[${TAG}]`, `Case finish.`);
      done();
    })

  })
}
